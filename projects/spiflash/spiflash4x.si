// @sylefeb 2021
// MIT license, see LICENSE_MIT in Silice repo root
// https://github.com/sylefeb/Silice
//
// ========================================================
// IMPORTANT: on the ice40, use icepack -s
// ========================================================
//
// Highly recommanded watch: https://www.youtube.com/watch?v=mitAhMOt3zI&t=1400s
//

import('ddr_clock.v')

$$if SIMULATION then
$$  VERBOSE = 1
$$end

$$if VERILATOR then
import('../common/verilator_data.v') // this is a feature supported by Silice
                                     // verilator framework to access raw data
                                     // stored in a 'data.raw' file
$$end

$$if ICEBREAKER or ICEBITSY or FOMU then
$$ICE40 = 1
import('../common/ice40_sb_io_inout.v')
import('../common/ice40_sb_io.v')
$$end

$$if not ICE40 and not SIMULATION then
$$error('The SPIflash x4 controller is currently only for the ice40 FPGA\n'
$$    ..'It should be possible to port it to other FPGAs with some efforts.')
$$end

$$if not nBytes then
$$ nBytes = 1
$$end

algorithm spiflash_qspi(
  input  uint8 send,
  input  uint1 trigger,
  input  uint1 send_else_read,
  input  uint1 qspi,
  output uint8 read,
  output uint1 clk,
  output uint1 csn,
  inout  uint1 io0,
  inout  uint1 io1,
  inout  uint1 io2,
  inout  uint1 io3,
) {
  uint1 dc(0);
  uint4 sending(0);
  uint1 osc(0);

  uint1 enable(0);
  ddr_clock ddr(clock <: clock, enable <:: enable, ddr_clock :> clk);

$$if not ICE40 then
  // NOTE: This is used for simulation ; it is somewhat convoluted
  // so as to simulated registered IO delays. Works best with Icarus and
  // vendor model, see stream.si in projects/spiflash
  uint1 d_o0(0);  uint1 d_o1(0);  uint1 d_o2(0);  uint1 d_o3(0);
  uint1 d_e0(0);  uint1 d_e1(0);  uint1 d_e2(0);  uint1 d_e3(0);
  uint1 d_csn(1);
  uint4 delay(4);
  always {
    // simulates registered IO
    io0.oenable = d_e0; io1.oenable = d_e1;
    io2.oenable = d_e2; io3.oenable = d_e3;
    // output enable on ios
    d_e0 = send_else_read;
    d_e1 = send_else_read & qspi;
    d_e2 = send_else_read & qspi;
    d_e3 = send_else_read & qspi;
    // read current
    read      = {read[0,4],delay};
    // simulates registered ios
    io0.o = d_o0;   io1.o = d_o1;   io2.o = d_o2;   io3.o = d_o3;
    delay = {io3.i,io2.i,io1.i,io0.i};
    // update outputs
    d_o0 = sending[0,1];  d_o1 = sending[1,1];
    d_o2 = sending[2,1];  d_o3 = sending[3,1];
    // start/keep sending?
    sending   = osc ? send[4,4] : send[0,4];
    osc       = ~osc;
    enable    = trigger;
    csn       = d_csn;
    d_csn     = ~enable;
  }
$$else
  // setup registered tristate ios
  uint4 io_oe(0); uint4 io_i(0); uint4 io_o(0);
  sb_io_inout sb_io0(clock <: clock, oe <: io_oe[0,1], in :> io_i[0,1], out <: io_o[0,1], pin <:> io0);
  sb_io_inout sb_io1(clock <: clock, oe <: io_oe[1,1], in :> io_i[1,1], out <: io_o[1,1], pin <:> io1);
  sb_io_inout sb_io2(clock <: clock, oe <: io_oe[2,1], in :> io_i[2,1], out <: io_o[2,1], pin <:> io2);
  sb_io_inout sb_io3(clock <: clock, oe <: io_oe[3,1], in :> io_i[3,1], out <: io_o[3,1], pin <:> io3);
  uint1 nenable <:: ~ enable;
  sb_io       sb_csn(clock <: clock, out <: nenable, pin :> csn);
  uint4 delay(0);
  always {
    // output enable on ios
    io_oe    = {{3{send_else_read & qspi}},send_else_read};
    // read current
    read      = {read[0,4],delay};
    delay     = io_i;
    // update outputs
    io_o      = sending;
    // start/keep sending?
    sending   = osc ? send[4,4] : send[0,4];
    osc       = ~osc;
    enable    = trigger;
  }
$$end
}

// -------------------------------------------------------------

algorithm spiflash_rom(
  input   uint1  in_ready,
  input   uint24 addr,
  output  uint$nBytes*8$ rdata,
  output  uint1  busy(1),
  // QSPI flash
  output  uint1  sf_csn(1),
  output  uint1  sf_clk,
  inout   uint1  sf_io0,
  inout   uint1  sf_io1,
  inout   uint1  sf_io2,
  inout   uint1  sf_io3,
  // double clock
  input   uint1  clkspi
) <autorun> {

  uint32 sendvec(0); //_ 38h (QPI enable)

  spiflash_qspi spiflash<reginputs,@clkspi>(
    clk     :> sf_clk,
    csn     :> sf_csn,
    io0    <:> sf_io0,
    io1    <:> sf_io1,
    io2    <:> sf_io2,
    io3    <:> sf_io3,
  );

  uint10 wait(0);
  uint4  four(0);
  uint3  stage(0);
  uint3  after(1);
  uint2  init(2b11);
$$if nBytes > 1 then
  uint$nBytes$ rdata_done(0);
$$end
$$if SIMULATION then
  uint32 cycle(0);
$$if VERILATOR then
  verilator_data vdta(clock <: clock);
$$end
$$end
$$if ICE40 then
$$end
  always {

    spiflash.qspi = ~init[1,1]; // qpi activated after first command

    switch (stage)
    {
      case 0: {
$$if ICARUS then
        // this is necessary for icarus as spiflash.qspi is otherwise 1bz
        spiflash.qspi    = reset ? 0 : spiflash.qspi;
        spiflash.trigger = reset ? 0 : spiflash.trigger;
        spiflash.send    = 0;
$$end
        stage = wait[9,1] ? after : 0; // counts up to 512 and goes to after
        wait  = wait + 1;
      }
      case 1: {
        four    = {init[0,1],~init[0,1],2b00};
        sendvec = (init == 2b01 ? {8hEB,addr} : 24h0)
                | (init == 2b00 ? {addr,8h00} : 24h0)
                | (init[1,1]    ? 32b00000000000100010001000000000000 : 24h0);
               //                ^^^^^^^^^^ produces 38h when not in QPI
        spiflash.send_else_read = 1; // sending
$$if nBytes > 1 then
        rdata_done = init[1,1] ? 1 : $1<<(nBytes-1)$;
$$end
        // start sending?
        if (in_ready | init[1,1]) {
$$if VERILATOR then
          vdta.addr = addr;
$$end
$$if VERBOSE then
          __display("[%d] spiflash START (@%h)",cycle,addr);
$$end
          busy                  = 1;
          stage                 = 2;
        }
      }
      case 2: {
        spiflash.trigger        = 1;
        spiflash.send           = sendvec[24,8];
        sendvec                 = sendvec << 8;
        stage                   = four[0,1] ? 3 : 2;
        four                    = four >> 1;
      }
      case 3: {
        // send dummy
        spiflash.trigger        = ~init[1,1];
        spiflash.send           = 8b00100000; // requests continuous read
        stage                   = 4;
      }
      case 4: {
        spiflash.send_else_read = 0;
        stage                   = 0; // wait
        wait                    = 511; //_ 3 cycles (one extra due to registered ios)
        after                   = 5;
      }
$$if nBytes == 1 then
      case 5: {
  $$if VERILATOR then
        rdata                   = vdta.data;  // from 'data.raw'
  $$else
        rdata                   = spiflash.read;
  $$end
        spiflash.trigger        = 0;
        busy                    = 0;
        init                    = {1b0,init[1,1]};
        stage                   = 1; // return to start stage
      }
$$else
      case 5: {
  $$if VERILATOR then
        rdata                   = {vdta.data[0,8],rdata[8,$(nBytes-1)*8$]};  // from 'data.raw'
        vdta.addr               = rdata_done[0,1] ? vdta.addr : (vdta.addr + 1);
  $$else
        rdata                   = {spiflash.read, rdata[8,$(nBytes-1)*8$]};
  $$end
        spiflash.trigger        = ~rdata_done[3,1] ? 0 : spiflash.trigger;
        busy                    = rdata_done[0,1]  ? 0 : busy;
        init                    = {1b0,init[1,1]};
        stage                   = rdata_done[0,1] ? 1 : 5;  // return to start stage when done
        rdata_done              = rdata_done >> 1;
$$if VERBOSE then
        if (~busy) {
          __display("[%d] spiflash DONE (%h)",cycle,rdata);
        }
$$end
      }
$$end
    }
$$if SIMULATION then
    cycle = cycle + 1;
$$end
  }
}

// -------------------------------------------------------------
