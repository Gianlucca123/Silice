
$$if not ICESTICK and not SIMULATION then
$$ error("This is assuming the 12 MHz clock of the IceStick, please adjust")
$$end

/*

This simple design reads data from UART to set the colors of
a NeoPixel string.
First send FF to initialize the sequence, then send a stream of:
ID R G B
Each 4 bytes sets LED ID at R,G,B

Note that the value FF is reserved to reset the sequence, and should
not be used as R,G,B or ID (thus max R,G,B is 254).

*/

// WS2812B timings
// see https://cdn-shop.adafruit.com/datasheets/WS2812B.pdf
// T0H  0.4us
// T0L  0.85us
// T1H  0.8us
// T1L  0.45us
// RES 55.0us

// NOTE: this code drivea fixed number of LEDs, change the number below
// (max 1023 otherwise adjust bitwidths below)
$$ NUM_PIXS = 2048

$$ t0h_cycles          = 5  -- 416 nsec
$$ t0l_cycles          = 10 -- 833 nsec
$$ t1h_cycles          = 10 -- 833 nsec
$$ t1l_cycles          = 5  -- 416 nsec
$$ res_cycles          = 800
$$ print('t0h_cycles = ' .. t0h_cycles)
$$ print('t0l_cycles = ' .. t0l_cycles)
$$ print('t1h_cycles = ' .. t1h_cycles)
$$ print('t1l_cycles = ' .. t1l_cycles)
$$ print('res_cycles = ' .. res_cycles)

// UART
$$uart_in_clock_freq_mhz = 12
$$uart_bauds             = 115200
$include('../common/uart.si')

// The hardware implements the LED driver
algorithm main(
  output uint8 leds = 0,
  output uint1 uart_tx,
  input  uint1 uart_rx,
  inout  uint8 pmod)
{
  // UART receiver
  uart_in ui;
  uart_receiver urecv(io <:> ui,uart_rx <: uart_rx);

  uint10 cnt(0);  // counter for generating the control signal
  uint1  ctrl(0); // control signal state

  simple_dualport_bram uint24 colors[$NUM_PIXS$] = {pad(0)};

  uint24 clr_from_uart(0);
  uint16 id_from_uart(0);
  uint5  receive_step(5b1); // each LEDS requies four bytes from uart

  always_after {
    pmod.oenable     = 8b11111111;
    pmod.o           = {8{ctrl}}; // output on PMOD pins
    colors.wenable1  = 0; // maintain low, pulses if needed (see next)
    if (ui.data_out_ready) {
      leds         = receive_step;
      // leds = ui.data_out; // for debugging
      // data is ready on uart
      if (ui.data_out == 8hff && id_from_uart == 16hffff) { // FF reset the sequence
        receive_step = 5b1;
      } else {
        colors.wenable1 = receive_step[4,1];
        onehot (receive_step) {
          case 0: { id_from_uart  = (id_from_uart <<8) | ui.data_out; }
          case 1: { id_from_uart  = (id_from_uart <<8) | ui.data_out; }
          case 2: { clr_from_uart = (clr_from_uart<<8) | ui.data_out; }
          case 3: { clr_from_uart = (clr_from_uart<<8) | ui.data_out; }
          case 4: { clr_from_uart = (clr_from_uart<<8) | ui.data_out; }
        }
        receive_step = {receive_step[0,4],receive_step[4,1]};
      }
    }
    colors.wdata1    = clr_from_uart;
    colors.addr1     = id_from_uart;
  }

  // we use a Silice algorithm to implement the driver
  while (1) {
    // iterate through the LEDs and set their color
    uint16 led_id = 0;
    colors.addr0 = led_id;
    while (led_id != $NUM_PIXS$) {
      uint24 send_clr(0);
      uint8  i     = 0;
      // color to be sent
      send_clr     = colors.rdata0;
      // next LED
      led_id       = led_id + 1;
      colors.addr0 = led_id;
      // send the 24 bits
      while (i != 24) {
        uint10 th = send_clr[23,1] ? $t1h_cycles-2$ : $t0h_cycles-2$;
        //                                     ^^^              ^^^
        // this accounts for the two cycles entering and exiting a while
        uint10 tl = send_clr[23,1] ? $t1l_cycles-3$ : $t0l_cycles-3$;
        //                                     ^^^              ^^^
        // this accounts for the two cycles entering and exiting a while and
        // the additional cycle it takes to loop back in the main loop
        // generates a '1'
        ctrl = 1;
        cnt  = 0;
        while (cnt != th) {
          cnt  = cnt + 1;
        }
        // generates a '0'
        ctrl = 0;
        cnt  = 0;
        while (cnt != tl) {
          cnt  = cnt + 1;
        }
        // shift clr to send next bit
        send_clr = send_clr << 1;
        // count sent bits
        i        = i + 1;
      }
    }
    // send reset
    ctrl = 0;
    cnt  = 0;
    while (cnt != $res_cycles$) {
      cnt  = cnt + 1;
    }
  }

}
